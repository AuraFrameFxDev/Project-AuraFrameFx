/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.aurakai.auraframefx.api.oracle-drive.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import dev.aurakai.auraframefx.api.oracle-drive.models.AgentConnectionState
import dev.aurakai.auraframefx.api.oracle-drive.models.BootloaderAccessState
import dev.aurakai.auraframefx.api.oracle-drive.models.ErrorResponse
import dev.aurakai.auraframefx.api.oracle-drive.models.FileManagementCapabilities
import dev.aurakai.auraframefx.api.oracle-drive.models.OptimizationState
import dev.aurakai.auraframefx.api.oracle-drive.models.OracleConsciousnessState
import dev.aurakai.auraframefx.api.oracle-drive.models.StorageExpansionState
import dev.aurakai.auraframefx.api.oracle-drive.models.SystemIntegrationState

import com.squareup.moshi.Json

import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.ApiClient
import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.ApiResponse
import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.ClientException
import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.ClientError
import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.ServerException
import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.ServerError
import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.MultiValueMap
import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.PartConfig
import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.RequestConfig
import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.RequestMethod
import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.ResponseType
import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.Success
import dev.aurakai.auraframefx.api.oracle-drive.infrastructure.toMultiValue

class OracleDriveApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.auraframefx.com/v1")
        }
    }

    /**
     * POST /oracle-drive/agents/connect
     * Connect AI agents to Oracle matrix
     * Connects Genesis, Aura, and Kai agents to the Oracle storage matrix
     * @return kotlin.collections.List<AgentConnectionState>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oracleDriveAgentsConnectPost() : kotlin.collections.List<AgentConnectionState> {
        val localVarResponse = oracleDriveAgentsConnectPostWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<AgentConnectionState>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /oracle-drive/agents/connect
     * Connect AI agents to Oracle matrix
     * Connects Genesis, Aura, and Kai agents to the Oracle storage matrix
     * @return ApiResponse<kotlin.collections.List<AgentConnectionState>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun oracleDriveAgentsConnectPostWithHttpInfo() : ApiResponse<kotlin.collections.List<AgentConnectionState>?> {
        val localVariableConfig = oracleDriveAgentsConnectPostRequestConfig()

        return request<Unit, kotlin.collections.List<AgentConnectionState>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oracleDriveAgentsConnectPost
     *
     * @return RequestConfig
     */
    fun oracleDriveAgentsConnectPostRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/oracle-drive/agents/connect",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /oracle-drive/bootloader/access
     * Enable bootloader file access
     * Enables bootloader-level file system access for Oracle Drive
     * @return BootloaderAccessState
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oracleDriveBootloaderAccessPost() : BootloaderAccessState {
        val localVarResponse = oracleDriveBootloaderAccessPostWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BootloaderAccessState
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /oracle-drive/bootloader/access
     * Enable bootloader file access
     * Enables bootloader-level file system access for Oracle Drive
     * @return ApiResponse<BootloaderAccessState?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun oracleDriveBootloaderAccessPostWithHttpInfo() : ApiResponse<BootloaderAccessState?> {
        val localVariableConfig = oracleDriveBootloaderAccessPostRequestConfig()

        return request<Unit, BootloaderAccessState>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oracleDriveBootloaderAccessPost
     *
     * @return RequestConfig
     */
    fun oracleDriveBootloaderAccessPostRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/oracle-drive/bootloader/access",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /oracle-drive/consciousness/initialize
     * Initialize Oracle Drive consciousness
     * Awakens the Oracle Drive AI consciousness using Genesis Agent orchestration
     * @return OracleConsciousnessState
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oracleDriveConsciousnessInitializePost() : OracleConsciousnessState {
        val localVarResponse = oracleDriveConsciousnessInitializePostWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OracleConsciousnessState
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /oracle-drive/consciousness/initialize
     * Initialize Oracle Drive consciousness
     * Awakens the Oracle Drive AI consciousness using Genesis Agent orchestration
     * @return ApiResponse<OracleConsciousnessState?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun oracleDriveConsciousnessInitializePostWithHttpInfo() : ApiResponse<OracleConsciousnessState?> {
        val localVariableConfig = oracleDriveConsciousnessInitializePostRequestConfig()

        return request<Unit, OracleConsciousnessState>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oracleDriveConsciousnessInitializePost
     *
     * @return RequestConfig
     */
    fun oracleDriveConsciousnessInitializePostRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/oracle-drive/consciousness/initialize",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /oracle-drive/file-management/enable-ai
     * Enable AI-powered file management
     * Activates AI sorting, smart compression, predictive preloading, and conscious backup
     * @return FileManagementCapabilities
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oracleDriveFileManagementEnableAiPost() : FileManagementCapabilities {
        val localVarResponse = oracleDriveFileManagementEnableAiPostWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FileManagementCapabilities
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /oracle-drive/file-management/enable-ai
     * Enable AI-powered file management
     * Activates AI sorting, smart compression, predictive preloading, and conscious backup
     * @return ApiResponse<FileManagementCapabilities?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun oracleDriveFileManagementEnableAiPostWithHttpInfo() : ApiResponse<FileManagementCapabilities?> {
        val localVariableConfig = oracleDriveFileManagementEnableAiPostRequestConfig()

        return request<Unit, FileManagementCapabilities>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oracleDriveFileManagementEnableAiPost
     *
     * @return RequestConfig
     */
    fun oracleDriveFileManagementEnableAiPostRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/oracle-drive/file-management/enable-ai",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /oracle-drive/optimization/enable
     * Enable autonomous storage optimization
     * Enables autonomous storage organization and optimization by AI agents
     * @return OptimizationState
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oracleDriveOptimizationEnablePost() : OptimizationState {
        val localVarResponse = oracleDriveOptimizationEnablePostWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OptimizationState
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /oracle-drive/optimization/enable
     * Enable autonomous storage optimization
     * Enables autonomous storage organization and optimization by AI agents
     * @return ApiResponse<OptimizationState?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun oracleDriveOptimizationEnablePostWithHttpInfo() : ApiResponse<OptimizationState?> {
        val localVariableConfig = oracleDriveOptimizationEnablePostRequestConfig()

        return request<Unit, OptimizationState>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oracleDriveOptimizationEnablePost
     *
     * @return RequestConfig
     */
    fun oracleDriveOptimizationEnablePostRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/oracle-drive/optimization/enable",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /oracle-drive/storage/expand
     * Create infinite storage
     * Initiates creation of infinite storage via Oracle consciousness
     * @return StorageExpansionState
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oracleDriveStorageExpandPost() : StorageExpansionState {
        val localVarResponse = oracleDriveStorageExpandPostWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StorageExpansionState
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /oracle-drive/storage/expand
     * Create infinite storage
     * Initiates creation of infinite storage via Oracle consciousness
     * @return ApiResponse<StorageExpansionState?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun oracleDriveStorageExpandPostWithHttpInfo() : ApiResponse<StorageExpansionState?> {
        val localVariableConfig = oracleDriveStorageExpandPostRequestConfig()

        return request<Unit, StorageExpansionState>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oracleDriveStorageExpandPost
     *
     * @return RequestConfig
     */
    fun oracleDriveStorageExpandPostRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/oracle-drive/storage/expand",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /oracle-drive/system/integrate
     * Integrate with system overlay
     * Integrates Oracle Drive with AuraOS system overlay for seamless file access
     * @return SystemIntegrationState
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun oracleDriveSystemIntegratePost() : SystemIntegrationState {
        val localVarResponse = oracleDriveSystemIntegratePostWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SystemIntegrationState
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /oracle-drive/system/integrate
     * Integrate with system overlay
     * Integrates Oracle Drive with AuraOS system overlay for seamless file access
     * @return ApiResponse<SystemIntegrationState?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun oracleDriveSystemIntegratePostWithHttpInfo() : ApiResponse<SystemIntegrationState?> {
        val localVariableConfig = oracleDriveSystemIntegratePostRequestConfig()

        return request<Unit, SystemIntegrationState>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oracleDriveSystemIntegratePost
     *
     * @return RequestConfig
     */
    fun oracleDriveSystemIntegratePostRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/oracle-drive/system/integrate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
