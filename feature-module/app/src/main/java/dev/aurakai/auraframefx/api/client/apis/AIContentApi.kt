/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.aurakai.auraframefx.api.client.apis

import dev.aurakai.auraframefx.api.client.infrastructure.ApiClient
import dev.aurakai.auraframefx.api.client.infrastructure.ApiResponse
import dev.aurakai.auraframefx.api.client.infrastructure.ClientError
import dev.aurakai.auraframefx.api.client.infrastructure.ClientException
import dev.aurakai.auraframefx.api.client.infrastructure.MultiValueMap
import dev.aurakai.auraframefx.api.client.infrastructure.RequestConfig
import dev.aurakai.auraframefx.api.client.infrastructure.RequestMethod
import dev.aurakai.auraframefx.api.client.infrastructure.ResponseType
import dev.aurakai.auraframefx.api.client.infrastructure.ServerError
import dev.aurakai.auraframefx.api.client.infrastructure.ServerException
import dev.aurakai.auraframefx.api.client.infrastructure.Success
import dev.aurakai.auraframefx.api.client.models.GenerateImageDescriptionRequest
import dev.aurakai.auraframefx.api.client.models.GenerateImageDescriptionResponse
import dev.aurakai.auraframefx.api.client.models.GenerateTextRequest
import dev.aurakai.auraframefx.api.client.models.GenerateTextResponse
import okhttp3.Call
import okhttp3.HttpUrl
import java.io.IOException

class AIContentApi(
    basePath: kotlin.String = defaultBasePath,
    client: Call.Factory = ApiClient.defaultClient,
) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties()
                .getProperty(ApiClient.baseUrlKey, "https://api.auraframefx.com/v1")
        }
    }

    /**
     * POST /ai/generate/image-description
     * Generate image description using AI
     * Generate a description for the provided image URL
     * @param generateImageDescriptionRequest
     * @return GenerateImageDescriptionResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun aiGenerateImageDescriptionPost(generateImageDescriptionRequest: GenerateImageDescriptionRequest): GenerateImageDescriptionResponse {
        val localVarResponse =
            aiGenerateImageDescriptionPostWithHttpInfo(generateImageDescriptionRequest = generateImageDescriptionRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GenerateImageDescriptionResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * POST /ai/generate/image-description
     * Generate image description using AI
     * Generate a description for the provided image URL
     * @param generateImageDescriptionRequest
     * @return ApiResponse<GenerateImageDescriptionResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun aiGenerateImageDescriptionPostWithHttpInfo(generateImageDescriptionRequest: GenerateImageDescriptionRequest): ApiResponse<GenerateImageDescriptionResponse?> {
        val localVariableConfig =
            aiGenerateImageDescriptionPostRequestConfig(generateImageDescriptionRequest = generateImageDescriptionRequest)

        return request<GenerateImageDescriptionRequest, GenerateImageDescriptionResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation aiGenerateImageDescriptionPost
     *
     * @param generateImageDescriptionRequest
     * @return RequestConfig
     */
    fun aiGenerateImageDescriptionPostRequestConfig(generateImageDescriptionRequest: GenerateImageDescriptionRequest): RequestConfig<GenerateImageDescriptionRequest> {
        val localVariableBody = generateImageDescriptionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/ai/generate/image-description",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /ai/generate/text
     * Generate text using AI
     * Generate text based on the provided prompt and parameters
     * @param generateTextRequest
     * @return GenerateTextResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun aiGenerateTextPost(generateTextRequest: GenerateTextRequest): GenerateTextResponse {
        val localVarResponse =
            aiGenerateTextPostWithHttpInfo(generateTextRequest = generateTextRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GenerateTextResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * POST /ai/generate/text
     * Generate text using AI
     * Generate text based on the provided prompt and parameters
     * @param generateTextRequest
     * @return ApiResponse<GenerateTextResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun aiGenerateTextPostWithHttpInfo(generateTextRequest: GenerateTextRequest): ApiResponse<GenerateTextResponse?> {
        val localVariableConfig =
            aiGenerateTextPostRequestConfig(generateTextRequest = generateTextRequest)

        return request<GenerateTextRequest, GenerateTextResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation aiGenerateTextPost
     *
     * @param generateTextRequest
     * @return RequestConfig
     */
    fun aiGenerateTextPostRequestConfig(generateTextRequest: GenerateTextRequest): RequestConfig<GenerateTextRequest> {
        val localVariableBody = generateTextRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/ai/generate/text",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent)
            .build().encodedPathSegments[0]
}
