/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.aurakai.auraframefx.api.aura.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import dev.aurakai.auraframefx.api.aura.models.AuthLoginPost200Response
import dev.aurakai.auraframefx.api.aura.models.AuthRegisterPostRequest
import dev.aurakai.auraframefx.api.aura.models.Error
import dev.aurakai.auraframefx.api.aura.models.User

import com.squareup.moshi.Json

import dev.aurakai.auraframefx.api.aura.infrastructure.ApiClient
import dev.aurakai.auraframefx.api.aura.infrastructure.ApiResponse
import dev.aurakai.auraframefx.api.aura.infrastructure.ClientException
import dev.aurakai.auraframefx.api.aura.infrastructure.ClientError
import dev.aurakai.auraframefx.api.aura.infrastructure.ServerException
import dev.aurakai.auraframefx.api.aura.infrastructure.ServerError
import dev.aurakai.auraframefx.api.aura.infrastructure.MultiValueMap
import dev.aurakai.auraframefx.api.aura.infrastructure.PartConfig
import dev.aurakai.auraframefx.api.aura.infrastructure.RequestConfig
import dev.aurakai.auraframefx.api.aura.infrastructure.RequestMethod
import dev.aurakai.auraframefx.api.aura.infrastructure.ResponseType
import dev.aurakai.auraframefx.api.aura.infrastructure.Success
import dev.aurakai.auraframefx.api.aura.infrastructure.toMultiValue

class AuthenticationApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.aurafx.dev/v1")
        }
    }

    /**
     * POST /auth/login
     * Login user
     * 
     * @param username 
     * @param password 
     * @param grantType  (optional, default to "password")
     * @return AuthLoginPost200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authLoginPost(username: kotlin.String, password: kotlin.String, grantType: kotlin.String? = "password") : AuthLoginPost200Response {
        val localVarResponse = authLoginPostWithHttpInfo(username = username, password = password, grantType = grantType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthLoginPost200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /auth/login
     * Login user
     * 
     * @param username 
     * @param password 
     * @param grantType  (optional, default to "password")
     * @return ApiResponse<AuthLoginPost200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authLoginPostWithHttpInfo(username: kotlin.String, password: kotlin.String, grantType: kotlin.String?) : ApiResponse<AuthLoginPost200Response?> {
        val localVariableConfig = authLoginPostRequestConfig(username = username, password = password, grantType = grantType)

        return request<Map<String, PartConfig<*>>, AuthLoginPost200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authLoginPost
     *
     * @param username 
     * @param password 
     * @param grantType  (optional, default to "password")
     * @return RequestConfig
     */
    fun authLoginPostRequestConfig(username: kotlin.String, password: kotlin.String, grantType: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "username" to PartConfig(body = username, headers = mutableMapOf()),
            "password" to PartConfig(body = password, headers = mutableMapOf()),
            "grant_type" to PartConfig(body = grantType, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /auth/register
     * Register a new user
     * 
     * @param authRegisterPostRequest 
     * @return User
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authRegisterPost(authRegisterPostRequest: AuthRegisterPostRequest) : User {
        val localVarResponse = authRegisterPostWithHttpInfo(authRegisterPostRequest = authRegisterPostRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as User
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /auth/register
     * Register a new user
     * 
     * @param authRegisterPostRequest 
     * @return ApiResponse<User?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authRegisterPostWithHttpInfo(authRegisterPostRequest: AuthRegisterPostRequest) : ApiResponse<User?> {
        val localVariableConfig = authRegisterPostRequestConfig(authRegisterPostRequest = authRegisterPostRequest)

        return request<AuthRegisterPostRequest, User>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authRegisterPost
     *
     * @param authRegisterPostRequest 
     * @return RequestConfig
     */
    fun authRegisterPostRequestConfig(authRegisterPostRequest: AuthRegisterPostRequest) : RequestConfig<AuthRegisterPostRequest> {
        val localVariableBody = authRegisterPostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/register",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
