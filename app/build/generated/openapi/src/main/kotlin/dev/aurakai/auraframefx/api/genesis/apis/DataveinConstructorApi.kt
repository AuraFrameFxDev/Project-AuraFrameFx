/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.aurakai.auraframefx.api.genesis.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import dev.aurakai.auraframefx.api.genesis.models.RomAnalysisResponse

import com.squareup.moshi.Json

import dev.aurakai.auraframefx.api.genesis.infrastructure.ApiClient
import dev.aurakai.auraframefx.api.genesis.infrastructure.ApiResponse
import dev.aurakai.auraframefx.api.genesis.infrastructure.ClientException
import dev.aurakai.auraframefx.api.genesis.infrastructure.ClientError
import dev.aurakai.auraframefx.api.genesis.infrastructure.ServerException
import dev.aurakai.auraframefx.api.genesis.infrastructure.ServerError
import dev.aurakai.auraframefx.api.genesis.infrastructure.MultiValueMap
import dev.aurakai.auraframefx.api.genesis.infrastructure.PartConfig
import dev.aurakai.auraframefx.api.genesis.infrastructure.RequestConfig
import dev.aurakai.auraframefx.api.genesis.infrastructure.RequestMethod
import dev.aurakai.auraframefx.api.genesis.infrastructure.ResponseType
import dev.aurakai.auraframefx.api.genesis.infrastructure.Success
import dev.aurakai.auraframefx.api.genesis.infrastructure.toMultiValue

class DataveinConstructorApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.genesis.aurakai.dev/v1")
        }
    }

    /**
     * enum for parameter analysisType
     */
     enum class AnalysisTypeDataveinAnalyzeRomPost(val value: kotlin.String) {
         @Json(name = "security") security("security"),
         @Json(name = "compatibility") compatibility("compatibility"),
         @Json(name = "modification") modification("modification");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * POST /datavein/analyze-rom
     * Analyze ROM/boot.img file
     * Performs AI-powered analysis of Android ROM or boot.img files
     * @param romFile ROM or boot.img file to analyze (optional)
     * @param analysisType Type of analysis to perform (optional)
     * @return RomAnalysisResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun dataveinAnalyzeRomPost(romFile: java.io.File? = null, analysisType: AnalysisTypeDataveinAnalyzeRomPost? = null) : RomAnalysisResponse {
        val localVarResponse = dataveinAnalyzeRomPostWithHttpInfo(romFile = romFile, analysisType = analysisType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RomAnalysisResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /datavein/analyze-rom
     * Analyze ROM/boot.img file
     * Performs AI-powered analysis of Android ROM or boot.img files
     * @param romFile ROM or boot.img file to analyze (optional)
     * @param analysisType Type of analysis to perform (optional)
     * @return ApiResponse<RomAnalysisResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun dataveinAnalyzeRomPostWithHttpInfo(romFile: java.io.File?, analysisType: AnalysisTypeDataveinAnalyzeRomPost?) : ApiResponse<RomAnalysisResponse?> {
        val localVariableConfig = dataveinAnalyzeRomPostRequestConfig(romFile = romFile, analysisType = analysisType)

        return request<Map<String, PartConfig<*>>, RomAnalysisResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dataveinAnalyzeRomPost
     *
     * @param romFile ROM or boot.img file to analyze (optional)
     * @param analysisType Type of analysis to perform (optional)
     * @return RequestConfig
     */
    fun dataveinAnalyzeRomPostRequestConfig(romFile: java.io.File?, analysisType: AnalysisTypeDataveinAnalyzeRomPost?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "romFile" to PartConfig(body = romFile, headers = mutableMapOf()),
            "analysisType" to PartConfig(body = analysisType?.value, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/datavein/analyze-rom",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
