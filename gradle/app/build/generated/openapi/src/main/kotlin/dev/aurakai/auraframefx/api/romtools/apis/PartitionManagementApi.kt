/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.aurakai.auraframefx.api.romtools.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import dev.aurakai.auraframefx.api.romtools.models.MountRequest
import dev.aurakai.auraframefx.api.romtools.models.PartitionInfo

import com.squareup.moshi.Json

import dev.aurakai.auraframefx.api.romtools.infrastructure.ApiClient
import dev.aurakai.auraframefx.api.romtools.infrastructure.ApiResponse
import dev.aurakai.auraframefx.api.romtools.infrastructure.ClientException
import dev.aurakai.auraframefx.api.romtools.infrastructure.ClientError
import dev.aurakai.auraframefx.api.romtools.infrastructure.ServerException
import dev.aurakai.auraframefx.api.romtools.infrastructure.ServerError
import dev.aurakai.auraframefx.api.romtools.infrastructure.MultiValueMap
import dev.aurakai.auraframefx.api.romtools.infrastructure.PartConfig
import dev.aurakai.auraframefx.api.romtools.infrastructure.RequestConfig
import dev.aurakai.auraframefx.api.romtools.infrastructure.RequestMethod
import dev.aurakai.auraframefx.api.romtools.infrastructure.ResponseType
import dev.aurakai.auraframefx.api.romtools.infrastructure.Success
import dev.aurakai.auraframefx.api.romtools.infrastructure.toMultiValue

class PartitionManagementApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8080/api/v1/romtools")
        }
    }

    /**
     * GET /partitions
     * List system partitions
     * Get information about all system partitions
     * @return kotlin.collections.List<PartitionInfo>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listPartitions() : kotlin.collections.List<PartitionInfo> {
        val localVarResponse = listPartitionsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<PartitionInfo>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /partitions
     * List system partitions
     * Get information about all system partitions
     * @return ApiResponse<kotlin.collections.List<PartitionInfo>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listPartitionsWithHttpInfo() : ApiResponse<kotlin.collections.List<PartitionInfo>?> {
        val localVariableConfig = listPartitionsRequestConfig()

        return request<Unit, kotlin.collections.List<PartitionInfo>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listPartitions
     *
     * @return RequestConfig
     */
    fun listPartitionsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/partitions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /partitions/{partitionName}/mount
     * Mount partition
     * Mount a specific partition (requires root)
     * @param partitionName Name of the partition to mount
     * @param mountRequest 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mountPartition(partitionName: kotlin.String, mountRequest: MountRequest) : Unit {
        val localVarResponse = mountPartitionWithHttpInfo(partitionName = partitionName, mountRequest = mountRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /partitions/{partitionName}/mount
     * Mount partition
     * Mount a specific partition (requires root)
     * @param partitionName Name of the partition to mount
     * @param mountRequest 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun mountPartitionWithHttpInfo(partitionName: kotlin.String, mountRequest: MountRequest) : ApiResponse<Unit?> {
        val localVariableConfig = mountPartitionRequestConfig(partitionName = partitionName, mountRequest = mountRequest)

        return request<MountRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mountPartition
     *
     * @param partitionName Name of the partition to mount
     * @param mountRequest 
     * @return RequestConfig
     */
    fun mountPartitionRequestConfig(partitionName: kotlin.String, mountRequest: MountRequest) : RequestConfig<MountRequest> {
        val localVariableBody = mountRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/partitions/{partitionName}/mount".replace("{"+"partitionName"+"}", encodeURIComponent(partitionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * POST /partitions/{partitionName}/unmount
     * Unmount partition
     * Unmount a specific partition (requires root)
     * @param partitionName Name of the partition to unmount
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun unmountPartition(partitionName: kotlin.String) : Unit {
        val localVarResponse = unmountPartitionWithHttpInfo(partitionName = partitionName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /partitions/{partitionName}/unmount
     * Unmount partition
     * Unmount a specific partition (requires root)
     * @param partitionName Name of the partition to unmount
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun unmountPartitionWithHttpInfo(partitionName: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = unmountPartitionRequestConfig(partitionName = partitionName)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation unmountPartition
     *
     * @param partitionName Name of the partition to unmount
     * @return RequestConfig
     */
    fun unmountPartitionRequestConfig(partitionName: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/partitions/{partitionName}/unmount".replace("{"+"partitionName"+"}", encodeURIComponent(partitionName.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
