# ===== AUTO-PROVISIONED 4-MODULE BUILD =====
# Gradle 7.4+ automatically discovers gradle/libs.versions.toml
# NO manual version catalog creation needed!

# PROJECT STRUCTURE:
# .
# ├── gradle/
# │   └── libs.versions.toml (AUTO-DISCOVERED by Gradle)
# ├── settings.gradle.kts (MINIMAL - no version catalog config)
# ├── build.gradle.kts (ROOT - just plugin management)
# ├── app/
# │   └── build.gradle.kts
# ├── core/
# │   └── build.gradle.kts  
# ├── data/
# │   └── build.gradle.kts
# └── domain/
#     └── build.gradle.kts

# ===== gradle/libs.versions.toml (SINGLE SOURCE OF TRUTH) =====
[versions]
# Java Toolchain (Auto-Provisioned)
java-toolchain = "23"
jvmTarget = "24"
javaVersion = "24"
java-target = "24"
java-source = "24"
embedded = "24"

# Core Build Tools (Bleeding Edge)
agp = "8.13.0-alpha04"
gradle = "9.0.0"
kotlin = "2.2.20-Beta2"
ksp = "2.2.20-Beta2-2.0.2"
hilt = "2.57"
googleServices = "4.4.3"

# Android SDK (Latest)
compileSdk = "36"
minSdk = "33"
targetSdk = "36"
cmakeVersion = "3.22.1"
ndkVersion = "27.0.12077973"

# Compose (Bleeding Edge 2025)
composeBom = "2025.07.00"
composeCompiler = "2.2.20-Beta2"
activityCompose = "1.10.1"
navigationCompose = "2.9.3"

# Core Libraries (Latest)
lifecycle = "2.9.2"
retrofit = "3.0.0"
okhttp = "5.1.0"
kotlinxSerialization = "1.9.0"
kotlinxCoroutines = "1.10.2"
kotlinReflect = "2.2.20-Beta2"
roomVersion = "2.7.2"
firebaseBom = "34.1.0"

[plugins]
# AUTO-PROVISIONED - Gradle handles versions automatically
android-application = { id = "com.android.application", version.ref = "agp" }
android-library = { id = "com.android.library", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
hilt-android = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }
google-services = { id = "com.google.gms.google-services", version.ref = "googleServices" }

[libraries]
# AndroidX Core
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version = "1.16.0" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycle" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }

# Compose (Auto-Versioned via BOM)
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-compose-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-compose-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-compose-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-compose-material3 = { group = "androidx.compose.material3", name = "material3" }
androidx-navigation-compose = { group = "androidx.navigation", name = "navigation-compose", version.ref = "navigationCompose" }

# Hilt (Auto-Provisioned)
hilt-android = { group = "com.google.dagger", name = "hilt-android", version.ref = "hilt" }
hilt-compiler = { group = "com.google.dagger", name = "hilt-compiler", version.ref = "hilt" }
hilt-navigation-compose = { group = "androidx.hilt", name = "hilt-navigation-compose", version = "1.2.0" }

# Network (Auto-Provisioned)
retrofit = { group = "com.squareup.retrofit2", name = "retrofit", version.ref = "retrofit" }
retrofit-converter-kotlinx-serialization = { group = "com.squareup.retrofit2", name = "converter-kotlinx-serialization", version.ref = "retrofit" }
okhttp3-logging-interceptor = { group = "com.squareup.okhttp3", name = "logging-interceptor", version.ref = "okhttp" }
kotlinx-serialization-json = { group = "org.jetbrains.kotlinx", name = "kotlinx-serialization-json", version.ref = "kotlinxSerialization" }

# Coroutines (Auto-Provisioned)
kotlinx-coroutines-core = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }
kotlinx-coroutines-android = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-android", version.ref = "kotlinxCoroutines" }

# Room (Auto-Provisioned)
room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "roomVersion" }
room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "roomVersion" }
room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "roomVersion" }

# Firebase (Auto-Versioned via BOM)
firebase-bom = { group = "com.google.firebase", name = "firebase-bom", version.ref = "firebaseBom" }
firebase-analytics = { group = "com.google.firebase", name = "firebase-analytics-ktx" }

[bundles]
# AUTO-PROVISIONED BUNDLES
compose = [
    "androidx-activity-compose", "androidx-compose-ui", 
    "androidx-compose-ui-tooling-preview", "androidx-compose-material3"
]
network = [
    "retrofit", "okhttp3-logging-interceptor", 
    "kotlinx-serialization-json", "retrofit-converter-kotlinx-serialization"
]
coroutines = [
    "kotlinx-coroutines-core", "kotlinx-coroutines-android"
]
room = [
    "room-runtime", "room-ktx"
]

# ===== settings.gradle.kts (MINIMAL - Auto-Discovery) =====
pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
    # NO VERSION CATALOG CONFIG NEEDED!
    # Gradle 7.4+ auto-discovers gradle/libs.versions.toml
}

rootProject.name = "BleedingEdgeApp"
include(":app", ":core", ":data", ":domain")

# ===== build.gradle.kts (ROOT - Plugin Management Only) =====
# Auto-provision Java toolchains across ALL projects
allprojects {
    # Java toolchain auto-provisioning
    afterEvaluate {
        extensions.findByType<JavaPluginExtension>()?.apply {
            toolchain {
                languageVersion.set(JavaLanguageVersion.of(23))
                vendor.set(JvmVendorSpec.ORACLE)
            }
        }
        
        # Kotlin auto-provisioning
        tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {
            compilerOptions {
                jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.fromTarget("24"))
                freeCompilerArgs.addAll(
                    "-Xjvm-default=all",
                    "-opt-in=kotlin.RequiresOptIn"
                )
            }
        }
    }
}

# ===== app/build.gradle.kts (AUTO-PROVISIONED) =====
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.compose.compiler)
    alias(libs.plugins.ksp)
    alias(libs.plugins.hilt.android)
    alias(libs.plugins.google.services)
    alias(libs.plugins.kotlin.serialization)
}

android {
    namespace = "com.example.bleedingedgeapp"
    compileSdk = libs.versions.compileSdk.get().toInt()

    defaultConfig {
        applicationId = "com.example.bleedingedgeapp"
        minSdk = libs.versions.minSdk.get().toInt()
        targetSdk = libs.versions.targetSdk.get().toInt()
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }

    buildFeatures {
        compose = true
    }

    # NO MANUAL COMPILE OPTIONS - Auto-provisioned from root!
    # NO MANUAL COMPOSE OPTIONS - K2 handles automatically!
}

dependencies {
    # Module dependencies
    implementation(project(":core"))
    implementation(project(":data"))
    implementation(project(":domain"))

    # Auto-provisioned bundles
    implementation(libs.bundles.compose)
    implementation(libs.bundles.network)
    implementation(libs.bundles.coroutines)
    implementation(libs.bundles.room)

    # Auto-provisioned BOM handling
    implementation(platform(libs.androidx.compose.bom))
    implementation(platform(libs.firebase.bom))

    # Individual libraries
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.navigation.compose)
    implementation(libs.firebase.analytics)

    # Hilt auto-provisioning
    implementation(libs.hilt.android)
    ksp(libs.hilt.compiler)
    implementation(libs.hilt.navigation.compose)

    # Room auto-provisioning
    ksp(libs.room.compiler)

    # Debug auto-provisioning
    debugImplementation(libs.androidx.compose.ui.tooling)
}

# ===== core/build.gradle.kts (LIBRARY AUTO-PROVISIONED) =====
plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.compose.compiler)
    alias(libs.plugins.ksp)
    alias(libs.plugins.hilt.android)
}

android {
    namespace = "com.example.bleedingedgeapp.core"
    compileSdk = libs.versions.compileSdk.get().toInt()

    defaultConfig {
        minSdk = libs.versions.minSdk.get().toInt()
        testInstrumentationRunner = "androidx.test.runner.AndroidJ