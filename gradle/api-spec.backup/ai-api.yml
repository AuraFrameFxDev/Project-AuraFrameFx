openapi: 3.1.0
info:
  title: AI API
  description: API for AI Content and AI Agents.
  version: 1.0.0
servers:
  - url: https://api.auraframefx.com/v1
    description: Production API
  - url: https://dev-api.auraframefx.com/v1
    description: Development API
  - url: http://localhost:8080/v1
    description: Local development server
tags:
  - name: AI Content
    description: AI-powered content generation and processing
  - name: AI Agents
    description: Management and interaction with AI agents (Aura, Kai, Genesis, etc.)
paths:
  /ai/generate/text:
    post:
      tags: [ AI Content ]
      summary: Generate text using AI
      security:
        - OAuth2AuthCode: [ auraframefx.ai ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateTextRequest'
      responses:
        '200':
          description: Text generation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTextResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal server error
  /ai/generate/image-description:
    post:
      tags: [ AI Content ]
      summary: Generate image description using AI
      security:
        - OAuth2AuthCode: [ auraframefx.ai ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateImageDescriptionRequest'
      responses:
        '200':
          description: Image description generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateImageDescriptionResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
  /agents/status:
    get:
      tags: [ AI Agents ]
      summary: Get status of all AI agents
      security:
        - OAuth2AuthCode: [ auraframefx.ai ]
      responses:
        '200':
          description: List of agent statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentStatus'
        '500':
          description: Internal server error
  /agent/{agentType}/process-request:
    post:
      tags: [ AI Agents ]
      summary: Send a request to an AI agent
      security:
        - OAuth2AuthCode: [ auraframefx.ai ]
      parameters:
        - $ref: '#/components/parameters/agentTypePathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentProcessRequest'
      responses:
        '200':
          description: Request processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentMessage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Agent not found
components:
  parameters:
    agentTypePathParam:
      name: agentType
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/AgentType'
      description: Type of AI agent to interact with
  responses:
    BadRequestError:
      description: Invalid request format or parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedError:
      description: Authentication credentials were missing or incorrect
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    GenerateTextRequest:
      type: object
      properties:
        prompt: { type: string, description: "The text prompt for content generation." }
        maxTokens: { type: integer, format: int32, minimum: 1, default: 500 }
        temperature: { type: number, format: float, minimum: 0.0, maximum: 1.0, default: 0.7 }
      required: [ prompt ]
    GenerateTextResponse:
      type: object
      properties:
        generatedText: { type: string, description: "The AI-generated text." }
        finishReason: { type: string, description: "Reason for generation completion." }
      required: [ generatedText ]
    GenerateImageDescriptionRequest:
      type: object
      properties:
        imageUrl: { type: string, format: url, description: "URL of the image to describe." }
        context: { type: string, description: "Optional additional context." }
      required: [ imageUrl ]
    GenerateImageDescriptionResponse:
      type: object
      properties:
        description: { type: string, description: "The AI-generated image description." }
      required: [ description ]
    AgentType:
      type: string
      enum: [ Aura, Kai, Genesis, Cascade, NeuralWhisper, AuraShield, GenKitMaster ]
    AgentProcessRequest:
      type: object
      properties:
        prompt: { type: string }
        context: { type: object, additionalProperties: true, nullable: true }
      required: [ prompt ]
    AgentMessage:
      type: object
      properties:
        sender: { $ref: '#/components/schemas/AgentType' }
        message: { type: string }
        timestamp: { type: string, format: date-time }
      required: [ sender, message, timestamp ]
    AgentStatus:
      type: object
      properties:
        agentType: { $ref: '#/components/schemas/AgentType' }
        processingState: { type: string }
        visionState: { type: string }
        lastActivity: { type: string, format: date-time }
        currentTask: { type: string, nullable: true }
      required: [ agentType, processingState, visionState, lastActivity ]
    ErrorResponse:
      type: object
      properties:
        code: { type: integer, format: int32 }
        message: { type: string }
        details: { type: object, additionalProperties: true, nullable: true }
      required: [ code, message ]
