openapi: 3.1.0
info:
  title: System API
  description: API for System Customization, Data Management, Security, Conference, and Tasks.
  version: 1.0.0
servers:
  - url: https://api.auraframefx.com/v1
    description: Production API
  - url: https://dev-api.auraframefx.com/v1
    description: Development API
  - url: http://localhost:8080/v1
    description: Local development server
tags:
  - name: System Customization
    description: System UI and behavior customization
  - name: Data Management
    description: Data handling and backup operations
  - name: Security
    description: Security, authentication, and authorization endpoints
  - name: Conference
    description: AI agent collaboration spaces (Conference Rooms)
  - name: Tasks
    description: Background task scheduling and management
paths:
  /system/lockscreen-config:
    get:
      tags: [ System Customization ]
      summary: Get lock screen configuration
      security:
        - OAuth2AuthCode: [ auraframefx.system ]
      responses:
        '200':
          description: Lock screen configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockScreenConfig'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags: [ System Customization ]
      summary: Update lock screen configuration
      security:
        - OAuth2AuthCode: [ auraframefx.system ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockScreenConfig'
      responses:
        '200':
          description: Lock screen configuration updated successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /conference/rooms:
    post:
      tags: [ Conference ]
      summary: Create a new conference room
      security:
        - OAuth2AuthCode: [ auraframefx.ai ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConferenceRoomCreateRequest'
      responses:
        '201':
          description: Conference room created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConferenceRoom'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
  /tasks/schedule:
    post:
      tags: [ Tasks ]
      summary: Schedule a new task
      security:
        - OAuth2AuthCode: [ auraframefx.ai ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskScheduleRequest'
      responses:
        '202':
          description: Task scheduled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
  /tasks/{taskId}:
    get:
      tags: [ Tasks ]
      summary: Get task status
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: ID of the task to check
      responses:
        '200':
          description: Task status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
        '404':
          description: Task not found
        '500':
          description: Internal server error
components:
  responses:
    BadRequestError:
      description: Invalid request format or parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedError:
      description: Authentication credentials were missing or incorrect
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    LockScreenConfig:
      type: object
      properties:
        clockConfig: { type: object, properties: { customTextColorEnabled: { type: boolean }, customTextColor: { type: string, format: color }, customTextSizeEnabled: { type: boolean }, customTextSize: { type: number, format: float } } }
        animation: { type: object, properties: { enabled: { type: boolean }, type: { type: string, enum: [ Fade, Slide, Zoom ] } } }
        hapticFeedback: { type: object, properties: { enabled: { type: boolean }, intensity: { type: integer, minimum: 0, maximum: 255 } } }
    QuickSettingsConfig:
      type: object
      properties:
        layout: { type: object, properties: { columns: { type: integer }, rows: { type: integer } } }
        padding: { type: object, properties: { top: { type: integer }, bottom: { type: integer }, horizontal: { type: integer } } }
        tiles: { type: array, items: { type: object, properties: { tileId: { type: string }, labelColor: { type: string, format: color }, iconColor: { type: string, format: color }, backgroundColor: { type: string, format: color } } } }
    SystemOverlayConfig:
      type: object
      properties:
        activeThemeName: { type: string }
        uiNetworkMode: { type: string }
        notchBar: { type: object, properties: { enabled: { type: boolean }, color: { type: string, format: color }, displayMode: { type: string, enum: [ Minimal, Detailed, Hidden ] }, customImageEnabled: { type: boolean }, customImageUrl: { type: string, format: url } } }
    LogEntry:
      type: object
      properties:
        timestamp: { type: string, format: date-time }
        level: { type: string, enum: [ DEBUG, INFO, WARN, ERROR ] }
        tag: { type: string }
        message: { type: string }
      required: [ timestamp, level, tag, message ]
    SystemMetrics:
      type: object
      properties:
        batteryLevel: { type: integer, minimum: 0, maximum: 100 }
        isCharging: { type: boolean }
        networkStatus: { type: string }
        lastUpdated: { type: string, format: date-time }
      required: [ batteryLevel, isCharging, networkStatus, lastUpdated ]
    BackupRequest:
      type: object
      properties:
        targetLocation: { type: string }
        includeLogs: { type: boolean, default: false }
        includePreferences: { type: boolean, default: true }
      required: [ targetLocation ]
    SecurityState:
      type: object
      properties:
        threatDetectionActive: { type: boolean }
        permissionsState: { type: object, additionalProperties: { type: boolean } }
        activeThreats: { type: array, items: { type: string } }
        lastScanTime: { type: string, format: date-time }
      required: [ threatDetectionActive, permissionsState ]
    ConferenceRoomCreateRequest:
      type: object
      properties:
        roomName: { type: string }
        orchestratorAgent: { $ref: '#/components/schemas/AgentType' }
      required: [ roomName, orchestratorAgent ]
    ConferenceRoom:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        orchestrator: { $ref: '#/components/schemas/AgentType' }
        activeAgents: { type: array, items: { $ref: '#/components/schemas/AgentType' } }
      required: [ id, name, orchestrator, activeAgents ]
    TaskScheduleRequest:
      type: object
      properties:
        taskType: { type: string }
        agentType: { $ref: '#/components/schemas/AgentType' }
        details: { type: object, additionalProperties: true }
        priority: { type: string, enum: [ HIGH, NORMAL, LOW ], default: NORMAL }
      required: [ taskType, agentType, details ]
    TaskStatus:
      type: object
      properties:
        taskId: { type: string }
        status: { type: string, enum: [ PENDING, IN_PROGRESS, COMPLETED, FAILED, CANCELLED ] }
        progress: { type: integer, minimum: 0, maximum: 100 }
        result: { type: object, additionalProperties: true, nullable: true }
        errorMessage: { type: string, nullable: true }
      required: [ taskId, status ]
    AgentType:
      type: string
      enum: [ Aura, Kai, Genesis, Cascade, NeuralWhisper, AuraShield, GenKitMaster ]
    ErrorResponse:
      type: object
      properties:
        code: { type: integer, format: int32 }
        message: { type: string }
        details: { type: object, additionalProperties: true, nullable: true }
      required: [ code, message ]
