openapi: 3.1.0
info:
  title: Sandbox API
  description: API for UI component testing and development environment.
  version: 1.0.0
servers:
  - url: https://api.auraframefx.com/v1
    description: Production API
  - url: https://dev-api.auraframefx.com/v1
    description: Development API
  - url: http://localhost:8080/v1
    description: Local development server
tags:
  - name: Sandbox
    description: UI component testing and development environment
paths:
  /sandbox/components:
    get:
      tags: [ Sandbox ]
      summary: List available UI components for testing
      description: Retrieve list of UI components available in the sandbox environment
      security:
        - OAuth2AuthCode: [ sandbox:read ]
      responses:
        '200':
          description: Component list retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SandboxComponent'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /sandbox/components/{componentId}/test:
    post:
      tags: [ Sandbox ]
      summary: Execute component test
      description: Run tests on a specific UI component in the sandbox environment
      security:
        - OAuth2AuthCode: [ sandbox:test ]
      parameters:
        - name: componentId
          in: path
          required: true
          schema:
            type: string
          description: ID of the component to test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentTestRequest'
      responses:
        '200':
          description: Component test executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentTestResult'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Component not found
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    SandboxComponent:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        category: { type: string, enum: [ UI, INTERACTIVE, VISUAL, FUNCTIONAL ] }
        testable: { type: boolean }
        version: { type: string }
    ComponentTestRequest:
      type: object
      properties:
        testType: { type: string, enum: [ VISUAL, FUNCTIONAL, PERFORMANCE, ACCESSIBILITY ] }
        parameters: { type: object, additionalProperties: true }
        environment: { $ref: '#/components/schemas/SandboxEnvironment' }
    ComponentTestResult:
      type: object
      properties:
        testId: { type: string }
        componentId: { type: string }
        testType: { type: string }
        passed: { type: boolean }
        score: { type: number, format: float, minimum: 0, maximum: 100 }
        details: { type: string }
        timestamp: { type: string, format: date-time }
        screenshots: { type: array, items: { type: string, format: uri } }
    SandboxEnvironment:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        screenSize: { type: string, enum: [ PHONE, TABLET, DESKTOP, WATCH ] }
        theme: { type: string, enum: [ LIGHT, DARK, AUTO ] }
        dpi: { type: string, enum: [ LDPI, MDPI, HDPI, XHDPI, XXHDPI, XXXHDPI ] }
    ErrorResponse:
      type: object
      properties:
        code: { type: integer, format: int32 }
        message: { type: string }
        details: { type: object, additionalProperties: true, nullable: true }
      required: [ code, message ]
